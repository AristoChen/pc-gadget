set default=0
set timeout=3

# load only kernel_status from the bootenv
load_env --file /EFI/ubuntu/grubenv kernel_status snap_kernel

set cmdline="console=ttyS0 console=tty1 panic=-1 systemd.gpt_auto=0 snapd_recovery_mode=run"

set kernel=kernel.efi

if [ "$kernel_status" = "try" ]; then
    # a new kernel got installed
    set kernel_status="trying"
    save_env kernel_status

    # use try-kernel.efi
    set kernel=try-kernel.efi
elif [ "$kernel_status" = "trying" ]; then
    # nothing cleared the "trying snap" so the boot failed
    # we clear the mode and boot normally
    set kernel_status=""
    save_env kernel_status
elif [ -n "$kernel_status" ]; then
    # ERROR invalid kernel_status state, reset to empty
    echo "invalid kernel_status!!!"
    echo "resetting to empty"
    set kernel_status=""
    save_env kernel_status
fi

search --label ubuntu-boot --set=ubuntu_boot

if [ -e $prefix/$kernel ]; then
menuentry "Run Ubuntu Core 20" {
    # use $prefix because the symlink manipulation at runtime for kernel snap 
    # upgrades, etc. should only need the /boot/grub/ directory, not the 
    # /EFI/ubuntu/ directory
    chainloader $prefix/$kernel $cmdline
}
else
menuentry "Run Ubuntu Core 20 compatibility mode" {
    search --label ubuntu-data --set=writable
    loopback loop ($writable)/system-data/var/lib/snapd/snaps/$snap_kernel
    chainloader (loop)/kernel.efi $cmdline
}
fi
